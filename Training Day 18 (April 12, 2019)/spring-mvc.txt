

	- presentation layer

	- Controller layer

		-> handle requests

		-> Servlet
			-> doGet
			-> doPost
			
		-> Spring MVC		<--simple pojo classes

	- model layer

		-> BO			<--simple pojo classes
		-> Services		<--simple pojo classes
		-> Respositories	<--simple pojo classes








Spring MVC
---------------
	- web framework built around principles of spring
	- POJO based and interface driven
	- based on a DispatcherServlet/frontcontroller pattern
		- model view controller
	- very lightweight and unobstrusive compared to other frameworks
	- built from the shortcomings of struts 1
	- supports
		- themes
		- locales/i18n
		- restful services
		- annotation based configuration
		- seamless integration with other spring services/beans

=> History
---------------
	- 2003 - spring framework - interface driven development
		- overcome complexity

	- 2004 - spring 1.0 - spring mvc
		- integrate common tools like hibernate
	- 2006 - 1.2.6
		- security
	- 2006 - spring 2.0
		- backword compatible
	- 2007 - spring 2.5
		- annotation driven development
	-2009 - spring 3.0
		- java configuration

=> Architecture
----------------------------------
	- custom app
	- spring mvc/sprin
	- java servlet/Jee


	- standard way of dooing things
	
==> Request / Response life cycle
--------------------------------------


incoming request ------> FrontController	---> delegate Request ---> Controller ----> handle request ----> backend
			(DispatcherServlet)								 	      |
			|		|	    delegate rendering <------controller model(data)     	<-----|
			|		|	
			|		|
			|	View Template (render response)
			|		|
		return control    <---- |

==> Vocabulary
---------------------
	- DispatcherServlet
		- the entry / configuration point for the application

	-> Controller
		- command pattern object that handles the request and determines which view to route to
		- simple pojos annotated with @Controller

	-> RequestMapping
		- url and request type that a method is tied to
	
	-> ViewResolver
		- locate view i.e. jsp pages or whatever view we are using 

	-> ServletConfig
		- per dispatcherservlet
		- configuration file per dispatcherservlet

	-> Pojo
		- plain old java object

	-> Bean
			
==> Building an application
---------------------------------------

	- Getting spring mvc
		- spring framework
			- http:www.springsource.org/spring-framework
		- 21 diff jars that it downloads
			- org.springframework.test
			- org.springframework.web
			- org.springframework.portlet
			- org.springframework.servlet
			- ....
		- maven
			- spring-webmvc
			- servlet-api
			- jstl 


===> introduction to Spring MVC
--------------------------------------
	- Configure web.xml
	- configure servlet-config.xml
	- add controller
	- add view : jsp / velocity / freemarker etc.

==> tomcat
-----------------------------
	- 











	@Controller 
	public class LoginController{

		@RequestMapping(value="/login, .....requesttype, contenttype, ....")
		public ? checkLogin(@PathVariable username, @PathVariable password){


			// what this method should return...
			//Model
			//View
			//ModelAndView
			//string ----> represents name of the view page to be rendered
			//<E> 	 -----> json data
		}


	}



1. create a dynamic web application project (maven)

2. download all the required jar files...

		spring-context, spring-webmvc
		servlet-api, jstl, etc.

3. configure the tomcat server

4. configure the DispatcherServlet in web.xml file

	<servlet>
		<servlet-name>dispatcher-servlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

		<init-param>
			<param-name></param-name>
			<param-value></param-value>
		</init-param>
	</servlet>

	<servlet-mapping>
			<servlet-name>dispatcher-servlet</servlet-name>
			<url-pattern>/</url-pattern>
	</servlet-mapping>

5. create spring-beans.xml file / AppConfig.class to define all the beans i.e. Controllers/componets/services/repository

	<context:component-scan base-package="com.capg" />
    	<mvc:annotation-driven />

6. configure the InternalResourceViewResolver

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

-----------------------------------------------------------------------------------


Spring Boot application with Spring MVC
-----------------------------------------------------
	-> provides RAD - Rapid Application Development features...
	-> simplifies the process of creating / managing / deploying the applications

	1. using spring initialzr



@RequestMapping


Accessing HttpServletRequest object
---------------------------------------

	@RequestMapping(value="/add", method=RequestMethod.POST )
	public String addEmployee(HttpServletRequest request) {
				
		System.out.println(request.getParameter("empid"));
		System.out.println(request.getParameter("ename"));
		System.out.println(request.getParameter("city"));
		System.out.println(request.getParameter("salary"));


@RequestBody
	
	--> read the json data received along with request, converts to the given type

	@RequestMapping(value="/add", method=RequestMethod.POST )
	public String addEmployee(@RequestBody Employee emp) {
		
		
		System.out.println(emp.getEmpId());
		System.out.println(emp.geteName());
		System.out.println(emp.getCity());
		System.out.println(emp.getSalary());

@RequestParam
	-> we can read the query parameters


	http://localhost:8081/employees/add?empid=101&ename=vishal&city=pune&salary=2000

	@RequestMapping(value="/add", method=RequestMethod.GET )
	public String addEmployee(
			@RequestParam(name="empid") int id, 
			@RequestParam(name="ename") String name, 
			@RequestParam(name="city") String city, 
			@RequestParam(name="salary") double sal) {
		
		
		System.out.println(id);
		System.out.println(name);
		System.out.println(city);
		System.out.println(sal);

@PathVariable
	-> we can bind the url parameters to the handler method

	http://localhost:8081/employees/add/101/vishal/pune/2000



@ResponseBody

@GetMapping

@PostMapping

@PutMapping

@DeleteMapping

@ModelAttribute 
	-> 



@Model

@RequestHeader  / @ResponseHeader


Spring Data JPA

Spring Data REST

Spring Boot



	@Controller							@RestController

	  -> return a view

		@GetMapping(...)					@GetMapping(...)				
		public String getXXX(){					public XXX getEXXX(){
			//return name of the viewpage				return X;
			//return modelAndView				}
		}


	-> return json data / REST api

		
		@GetMapping(...)
		@ResponseBody
		public XXX getXXX(){
			return XXX;
		}























